var mongoose = require('mongoose'),    Schema = mongoose.Schema,    crypto = require('crypto');        var userSchema= new Schema({    firstName:String,    lastName:String,    created:{        type:Date,        default: Date.now    },    lastVisited: Date,    email:{        type:String,        index:true,        match: [/.+\@.+\..+/, "Please fill a valid e-mail address"]    },    password: {        type:String,        validate: [            function(password) {                return password && password.length > 6;            }, 'Password should be longer'        ]    },     salt: {///used to hash password        type: String    },    provider: {//used to indicate the strategy used to register the user        type: String,        required: 'Provider is required'    },    providerId: String,//indicate the user identifier for the authentication strategy    providerData: {},//used to store the user object retrieved from OAuth providers.    userName: {        type: String,        index: true,        unique: true,        required: 'Username is required',        trim: true    },    selfReportingForm:{        type: String,        ref:'question'    },    scoreComps:{        type: String,        ref:'score'    },    scores:{        thugScore:Number,        section1score:Number,        section2score:Number,        section3score:Number,        section4score:Number,        section5score:Number,        highlighted:{            section:String,            text:String,            score:Number        }    }});userSchema.virtual('fullName').get(function() {    return this.firstName + ' ' + this.lastName;}).set(function(fullName) {    var splitName = fullName.split(' ');    this.firstName = splitName[0] || '';    this.lastName = splitName[1] || '';});userSchema.pre('save', function(next) {//handle hashing of user password    if (this.password) {        this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');//creates an autogenerated pseudo-random hashing salt        this.password = this.hashPassword(this.password);//replaces the current user password with a hashed password using the hashPassword() instance method    }    next(); });userSchema.methods.hashPassword = function(password) {//is used to hash a password string by utilizing Node.js' crypto module    return crypto.pbkdf2Sync(password, this.salt, 10000,    64).toString('base64');};userSchema.methods.authenticate = function(password) {//accepts a string argument, hashes it, and compares it to the current user's hashed password    return this.password === this.hashPassword(password);};userSchema.statics.findUniqueUsername = function(username, suffix,callback) {//used to find an available unique username for new users. You'll use this method later in this chapter when you deal with OAuth authentication    var _this = this;    var possibleUsername = username + (suffix || '');    _this.findOne({        username: possibleUsername    }, function(err, user) {        if (!err) {            if (!user) {                callback(possibleUsername);            } else {                return _this.findUniqueUsername(username, (suffix || 0) +                    1, callback);            }        } else {            callback(null);        }     });};   userSchema.set('toJSON', {    getters: true,    virtuals: true});mongoose.model('user', userSchema);